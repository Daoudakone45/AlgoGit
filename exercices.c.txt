#include "exercices.h"
#include "util.h"

/* Exercice 1 réponses :

    1a) 190 = n*(n-1)/2
    1b) 19  = n-1

    2a) Tri fusion
    2b) Tri par insertion

    3a) 20s  = 4s * 5
    3b) 100s = 4s * 5 * 5

    4 O(n^2)
*/


/* Exercice 2 */
int is_sorted(int t[], int size) {
    int i;
    for (i = 0; i < size-1; i++)
        if (t[i] > t[i+1])
            return 0;
    return 1;
}


/* Exercice 3 */
int pgcd(int a, int b) {
    if (a == b)
        return a;
    else if (a > b)
        return pgcd(a-b, b);
    else /* a < b */
        return pgcd(a, b-a);
}

/* Exercice 4 */
int highest_slope(int t[], int size) {
    int highest = 0;
    int a = 0, b = 0;
    while (b < size-1) {
        if (t[a] == t[b])
            b++;
        else if (t[a] > t[b] && t[b] >= t[b+1])
            b++;
        else if (t[a] < t[b] && t[b] <= t[b+1])
            b++;
        else
            a = b;
        int height = t[a]-t[b];
        if (height < 0)
            height = -height;
        if (height > highest)
            highest = height;
    }
    return highest;
}

/* Exercice 5 */
int count_common_elements(int t1[], int size1, int t2[], int size2) {
    int i = 0, j = 0, count = 0;
    while (i < size1 && j < size2) {
        if (t1[i] < t2[j])
            i++;
        else if (t1[i] > t2[j])
            j++;
        else {
            count++;
            i++;
            while (i < size1 && t1[i-1] == t1[i])
                i++;
        }
    }
    return count;
}

/* Exercice 5.2 réponse : 
    O(n) ou O(size1+size2)
*/


/* Exercice 6 */
int three_sum(int t[], int size) {
    sort(t, size);
    int i, j, k;
    for (i = 0; i < size; i++) {
        j = i+1;
        k = size-1;
        while (j < k) {
            if (t[i]+t[j]+t[k] == 0)
                return 1;
            else if (t[i]+t[j]+t[k] < 0)
                j++;
            else
                k--;
        }
    }
    return 0;
}

/* Exercice 6.2 réponse : 
    O(n^2)
*/


/* Exercice 7 */
int parentheses(char seq[], int n, int pos, int open) {

    if (open < 0)
        return 0;
    else if (open > n-pos)
        return 0;
    else if (pos == n) {
        display_sequence(seq, n);
        return 1;
    }
    else {
        int count = 0;
        seq[pos] = '(';
        count += parentheses(seq, n, pos+1, open+1);
        seq[pos] = ')';
        count += parentheses(seq, n, pos+1, open-1);
        return count;
    }
}
